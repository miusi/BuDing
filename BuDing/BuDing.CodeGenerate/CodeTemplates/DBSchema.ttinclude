<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Runtime" #> 
<#@ assembly name="System.xml" #>
<#@ assembly name="System.Data.Common" #>
<#@ assembly name="E:\musi\BuDing\BuDing\packages\MySql.Data.8.0.13\lib\net452\MySql.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #> 
<#@ import namespace="System.Runtime" #> 
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="MySql.Data.MySqlClient" #>

<#+
    public class DBSchemaFactory
    {
        public static IDBSchema GetDBSchema(string dbType)
        {
            IDBSchema dbSchema=null;
            string connectionString = String.Empty;
            switch (dbType)
            {
                case "SqlServer":
                    connectionString = "Data Source=.;Initial Catelog=dbName;Persist Security Info=True;User ID=sa;Password=sa;";
                    dbSchema = new SqlServerSchema(connectionString);
                    break;
                case "MySql":
                    connectionString = "Server=localhost;Port=3306;Database=buding;Uid=root;Pwd=root;charset=utf8;";
                    dbSchema = new MySqlSchema(connectionString);
                    break;
				case "Oracle":
					break;
                default:
                    throw new ArgumentException("The input argument of DatabaseType is invalid!");
            }
            return dbSchema;
        }

        public interface IDBSchema
        {
            List<Table> GetTables(string dbName);
        }

        public class SqlServerSchema : IDBSchema
        {
            public SqlConnection conn;

            public SqlServerSchema(string connString)
            {
                conn = new SqlConnection(connString);            
            }

            public List<Table> GetTables(string dbName)
            {
                List<Table> list = new List<Table>();
                try 
                {            
                    conn.Open();
                    var cmd = string.Format(@"SELECT tab.name AS TABLE_NAME, col.name AS COLUMN_NAME, 
                                                col.is_identity, per.value AS COLUMN_COMMENT, t.name AS DATA_TYPE 
                                                FROM {0}.sys.columns col INNER JOIN {0}.sys.tables tab 
                                                ON col.object_id = tab.object_id LEFT JOIN {0}.sys.extended_properties per 
                                                ON col.column_id = per.minor_id AND per.major_id = tab.object_id
                                                INNER JOIN {0}.SYS.types t ON col.user_type_id = t.user_type_id", dbName);
                    
                    SqlCommand command = new SqlCommand(cmd, conn);
                    using(SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string db = dbName,
                                table = reader["TABLE_NAME"].ToString(),
                                column = reader["COLUMN_NAME"].ToString(),
                                type = reader["DATA_TYPE"].ToString(),
                                comment = reader["COLUMN_COMMENT"].ToString(),
                                pk = reader["is_identity"].ToString();
                            Table entity = list.FirstOrDefault(x => x.TableName == table);
                            if (entity == null)
                            {
                                entity = new Table(table);
                                entity.Columns.Add(new Column
                                {
                                    Name = column,
                                    Type = GetCLRType(type),
                                    Comment = comment,
                                    IsPK = pk == "1" ? true : false
                                });
                                list.Add(entity);
                            }
                            else
                            {
                                entity.Columns.Add(new Column
                                {
                                    Name = column,
                                    Type = GetCLRType(type),
                                    Comment = comment,
                                    IsPK = pk == "1" ? true : false
                                });
                            }
                        }
                    }
                }
                finally
                {
                    conn.Close();
                }

                return list;
            }
        }

        public class MySqlSchema : IDBSchema
        {
            public MySqlConnection conn;

            public MySqlSchema(string connString)
            {
                conn = new MySqlConnection(connString);
            }

            public List<Table> GetTables(string dbName)
            {
                List<Table> list = new List<Table>();
                try 
                {            
                    conn.Open();
                    var cmd = string.Format(@"SELECT `information_schema`.`COLUMNS`.`TABLE_SCHEMA`
                                                    ,`information_schema`.`COLUMNS`.`TABLE_NAME`
                                                    ,`information_schema`.`COLUMNS`.`COLUMN_NAME`
                                                    ,`information_schema`.`COLUMNS`.`DATA_TYPE`
                                                    ,`information_schema`.`COLUMNS`.`COLUMN_COMMENT`
                                                    ,`information_schema`.`COLUMNS`.`COLUMN_KEY`
													,`information_schema`.`COLUMNS`.`CHARACTER_MAXIMUM_LENGTH`
                                                FROM `information_schema`.`COLUMNS`
                                                WHERE `information_schema`.`COLUMNS`.`TABLE_SCHEMA` = '{0}'", dbName);
                    
                    MySqlCommand command = new MySqlCommand(cmd, conn);
                    using(MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string db = reader["TABLE_SCHEMA"].ToString(),
                                table = reader["TABLE_NAME"].ToString(),
                                column = reader["COLUMN_NAME"].ToString(),
                                type = reader["DATA_TYPE"].ToString(),
                                comment = reader["COLUMN_COMMENT"].ToString(),
                                pk = reader["COLUMN_KEY"].ToString(),
								length=reader["CHARACTER_MAXIMUM_LENGTH"].ToString();
                            Table entity = list.FirstOrDefault(x => x.TableName == table);
                            if (entity == null)
                            {
                                entity = new Table(table);
                                entity.Columns.Add(new Column
                                {
                                    Name = column,
                                    Type = GetCLRType(type),
                                    Comment = comment,
                                    IsPK = pk == "PRI" ? true : false,
									Length=length
                                });
                                list.Add(entity);
                            }
                            else
                            {
                                entity.Columns.Add(new Column
                                {
                                    Name = column,
                                    Type = GetCLRType(type),
                                    Comment = comment,
                                    IsPK = pk == "PRI" ? true : false,
									Length=length
                                });
                            }
                        }
                    }
                }
                finally
                {
                    conn.Close();
                }

                return list;
            }
        }
        
        public static string GetCLRType(string dbType)
        {
            switch(dbType)
            {
                case "tinyint":
                case "smallint":
                case "mediumint":
                case "int":
                case "integer":
                    return "int?";
                case "double":
                    return "double?";
                case "float":
                    return "float?";
                case "decimal":
                case "numeric":
                case "real":
                    return "decimal?";
                case "bit":
                    return "bool?";
                case "date":
                case "time":
                case "year":
                case "datetime":
                case "timestamp":
                    return "DateTime?";
                case "tinyblob":
                case "blob":
                case "mediumblob":
                case "longblog":
                case "binary":
                case "varbinary":
                    return "byte[]";
                case "char":
                case "varchar":                    
                case "tinytext":
                case "text":
                case "mediumtext":
                case "longtext":
                    return "string";
                case "point":
                case "linestring":
                case "polygon":
                case "geometry":
                case "multipoint":
                case "multilinestring":
                case "multipolygon":
                case "geometrycollection":
                case "enum":
                case "set":
                default:
                    return dbType;
            }
        }
    }

    public class Table
    {
        public Table()
        {
            this.Columns = new List<Column>();
        }

        public Table(string name)
            : this()
        {
            this.TableName = name;
        }

        public string TableName { get; set; }
        public List<Column> Columns { get; set; }
    }

    public class Column
    {
        //字段名
        public string Name { get; set; }
        //类型
        public string Type { get; set; }
        //备注
        public string Comment { get; set; }
        //是否主键
        public bool IsPK { get; set; }

		public string Length{get;set;}
    }
#>

